name: Deploy to GitHub Pages

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
    - name: TEST ECHO
      run: |
        echo "OK1"

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download and Extract Tarot Data
      run: |
        curl -L https://github.com/JRF-2018/youscout/releases/download/v0.30/jrf_tarot-20140118.zip -o jrf_tarot.zip
        unzip jrf_tarot.zip -d .
        
        # --- デバッグ用ログ ---
        echo "--- After unzip ---"
        ls -F # ファイルとディレクトリを区別して表示
        ls -F jrf_tarot/ || true # 展開後のディレクトリの中身を確認 (存在しない場合もエラーにしない)
        echo "-------------------"

    - name: Prepare Pages Content
      run: |
        mkdir public
        
        # ファイルやディレクトリが見つからなくてもエラーにしない (デバッグのため)
        # cpコマンドは、対象がないとエラーになるため、|| true を付加してエラーを抑制
        cp *.html public/ || true 
        cp *.txt public/ || true
        cp -r simplest public/ || true
        
        # jrf_tarot-20140118 ディレクトリが存在するか確認し、存在すればコピー
        # ZIPの中身が 'jrf_tarot/' というディレクトリであれば、以下でOK
        if [ -d "jrf_tarot" ]; then
          cp -r jrf_tarot public/
        else
          echo "Warning: jrf_tarot directory not found after unzip. Check zip content."
          # ZIPの中身が 'jrf_tarot-20140118/' というディレクトリであれば、上の行を jrf_tarot-20140118 に戻す
          # もし直接ファイルが展開される（ディレクトリが作られない）なら、
          # cp jrf_tarot-20140118/* public/ || true # こちらを試す可能性
        fi
        
        # --- デバッグ用ログ ---
        echo "--- Contents of public directory for upload ---"
        ls -R public/
        echo "-----------------------------------------------"
        
        # public ディレクトリが空でないか、確認
        if [ -z "$(ls -A public/)" ]; then
          echo "Error: public directory is empty! No content to upload."
          exit 1 # 空の場合は強制的にエラー終了
        fi

    - name: Upload Pages Artifact
      uses: actions/upload-pages-artifact@v4
      with:
        path: './public' # ここで、準備したディレクトリを指定する

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
